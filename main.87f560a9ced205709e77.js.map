{"version":3,"sources":["webpack:///./js/01-task.js","webpack:///./js/03-task.js","webpack:///./index.js","webpack:///./js/02-task.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","makeTransaction","transaction","reject","min","max","Math","floor","random","id","logSuccess","transactionData","logError","warn","amount","catch","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table"],"mappings":"8EACA,MAAMA,EAAQC,GACL,IAAIC,QAAQC,IACjBC,WAAW,KACTD,EAAQF,IACPA,KAIDI,EAASC,GAAQC,QAAQC,IAAK,kBAAiBF,OAGrDN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,I,mBCdjB,MAIMK,EAAmBC,GAChB,IAAIT,QAAQ,CAACC,EAASS,KAC3B,MAAMZ,GANyBa,EAMS,IANJC,EAMS,IALxCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IADpB,IAACA,EAAKC,EAQpCV,WAAW,KACUW,KAAKE,SAAW,GAEjCd,EAAQ,CAAEe,GAAIP,EAAYO,GAAIZ,KAAMN,IAEpCY,EAAOD,EAAYO,KAEpBlB,KAIDmB,EAAcC,IAClBb,QAAQC,IAAK,eAAcY,EAAgBF,mBAAmBE,EAAgBd,WAG1Ee,EAAWH,IACfX,QAAQe,KAAM,gCAA+BJ,+BAa/CR,EAAgB,CAAEQ,GAAI,GAAIK,OAAQ,MAC/Bd,KAAKU,GACLK,MAAMH,GACTX,EAAgB,CAAEQ,GAAI,GAAIK,OAAQ,MAC/Bd,KAAKU,GACLK,MAAMH,GAETX,EAAgB,CAAEQ,GAAI,GAAIK,OAAQ,KAC/Bd,KAAKU,GACLK,MAAMH,GAETX,EAAgB,CAAEQ,GAAI,GAAIK,OAAQ,MAC/Bd,KAAKU,GACLK,MAAMH,I,kCClDT,gD,mBCAA,MAAMI,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,CAACC,EAAUC,IAC1B,IAAI5B,QAAQC,IAIjBA,EAHqB0B,EAASE,IAAIC,GAChCA,EAAKN,OAASI,EAAW,IAAKE,EAAML,QAASK,EAAKL,QAAWK,MAM7D3B,EAAS4B,GAAgB1B,QAAQ2B,MAAMD,GAK7CL,EAAgBH,EAAO,SAAShB,KAAKJ,GACrCuB,EAAgBH,EAAO,OAAOhB,KAAKJ,I","file":"main.87f560a9ced205709e77.js","sourcesContent":["\nconst delay = ms => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(ms);\n    }, ms);\n  });\n};\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms\n","const randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction) => {\n  return new Promise((resolve, reject) => {\n    const delay = randomIntegerFromInterval(200, 500);\n\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n      if (canProcess) {\n        resolve({ id: transaction.id, time: delay });\n      } else {\n        reject(transaction.id);\n      }\n    }, delay);\n  });\n};\n\nconst logSuccess = (transactionData) => {\n  console.log(`Transaction ${transactionData.id} processed in ${transactionData.time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n/*\n * Работает так\n */\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n/*\n * Должно работать так\n */\nmakeTransaction({ id: 70, amount: 150 })\n  .then(logSuccess)\n  .catch(logError);\nmakeTransaction({ id: 71, amount: 230 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 })\n  .then(logSuccess)\n  .catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 })\n  .then(logSuccess)\n  .catch(logError);\n","import \"./js/01-task\";\nimport \"./js/02-task\";\nimport \"./js/03-task\";\nimport './sass/styles.scss';\n","const users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers, userName) => {\n  return new Promise(resolve => {\n    const updatedUsers = allUsers.map(user =>\n      user.name === userName ? { ...user, active: !user.active } : user,\n    );\n    resolve(updatedUsers);\n  });\n};\n\nconst logger = updatedUsers => console.table(updatedUsers);\n\n/*\n * Должно работать так\n */\ntoggleUserState(users, 'Mango').then(logger);\ntoggleUserState(users, 'Lux').then(logger);\n"],"sourceRoot":""}